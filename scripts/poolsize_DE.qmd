---
title: "Pool Size Differential Expression Analysis"
author: "Felix Pf√∂rtner"
date: "2025-06-04"
format: 
  html:
    code-fold: false
    toc: true
    toc-depth: 4
    theme: cosmo
    embed-resources: true
editor: visual
---

Differential expression analysis comparing different pool sizes (80ng, 320ng, and 920ng).

# Setup

```{r}
#| label: setup
#| message: false
#| warning: false

library(tidyverse)
library(limma)
library(edgeR)
library(plyranges)
library(scales)
library(DT)
library(UpSetR)
library(clusterProfiler)
library(org.Mm.eg.db)
library(enrichplot)
library(ggplot2)
source("/data/share/htp/prime-seq_NextGen/scripts/poolsize_functions.R")
```

# Data Loading

## Read Count Data

```{r}
#| label: load-data
#| message: false

counts_080 <- as.data.frame(as.matrix(readRDS("/data/share/htp/prime-seq_NextGen/data/FC2024_08_01_poolsize/03_zUMIs/80ng/zUMIs_output/expression/poolsize_80ng.dgecounts.rds")$umicount$inex$all)) %>% 
  rownames_to_column(var="gene_id") %>%
  as_tibble()

counts_320 <- as.data.frame(as.matrix(readRDS("/data/share/htp/prime-seq_NextGen/data/FC2024_08_01_poolsize/03_zUMIs/320ng/zUMIs_output/expression/poolsize_320ng.dgecounts.rds")$umicount$inex$all)) %>% 
  rownames_to_column(var="gene_id") %>%
  as_tibble()

counts_920 <- as.data.frame(as.matrix(readRDS("/data/share/htp/prime-seq_NextGen/data/FC2024_08_01_poolsize/03_zUMIs/920ng/zUMIs_output/expression/poolsize_920ng.dgecounts.rds")$umicount$inex$all)) %>% 
  rownames_to_column(var="gene_id") %>%
  as_tibble()
```

## Load Annotation Data

```{r}
#| label: load-annotations

genes <- read.delim("/data/share/htp/prime-seq_NextGen/data/FC2024_08_01_poolsize/03_zUMIs/80ng/zUMIs_output/expression/poolsize_80ng.gene_names.txt")

gtf <- read_gff("/data/share/htp/prime-seq_NextGen/data/FC2024_08_01_poolsize/03_zUMIs/80ng/poolsize_80ng.final_annot.gtf")
```

## Combine Datasets

```{r}
#| label: combine-data

# Add pool size prefixes to sample names
colnames(counts_080)[-1] <- paste0("pool080_", colnames(counts_080)[-1])
colnames(counts_320)[-1] <- paste0("pool320_", colnames(counts_320)[-1])
colnames(counts_920)[-1] <- paste0("pool920_", colnames(counts_920)[-1])

# Find common genes across all datasets
counts <- full_join(full_join(counts_080, counts_320, by="gene_id"), counts_920, by="gene_id") %>%
  mutate(across(where(is.numeric), ~replace_na(., 0))) %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, everything())

# Create sample metadata
sample_info <- data.frame(
  sample = colnames(counts)[-(1:2)],
  pool_size = c(rep("pool080", ncol(counts_080)-1), 
                rep("pool320", ncol(counts_320)-1), 
                rep("pool920", ncol(counts_920)-1)),
  pool_size_numeric = c(rep(080, ncol(counts_080)-1), 
                        rep(320, ncol(counts_320)-1), 
                        rep(920, ncol(counts_920)-1))
)

# Convert pool_size to factor with correct ordering
sample_info$pool_size <- factor(sample_info$pool_size, levels = c("pool080", "pool320", "pool920"))

# Report dimensions of the datasets
print(paste("Combined dataset:", nrow(counts), "genes,", ncol(counts)-2, "samples"))
```

# Analysis with All Samples

This section analyzes all available samples with 2 different filtering strategies.

## Quality Control - All Samples

### Library Size Distribution - All Samples

```{r}
#| label: library-sizes
#| fig-width: 10
#| fig-height: 6

lib_sizes <- colSums(counts[,-c(1:2)])
lib_df <- data.frame(
  sample = names(lib_sizes),
  lib_size = lib_sizes,
  pool_size = sample_info$pool_size
)

p_lib <- ggplot(lib_df, aes(x = sample, y = lib_size, fill = pool_size)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Library sizes (UMI counts)", 
       x = "Sample", y = "UMI counts", fill = "Pool size") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  scale_y_continuous(labels = comma)

print(p_lib)
```

### PCA Before Filtering - All Samples

```{r}
#| label: pca-before
#| fig-width: 12
#| fig-height: 5

count_matrix_raw <- as.matrix(counts[,-c(1:2)])
rownames(count_matrix_raw) <- counts$gene_id
logcpm_raw <- cpm(count_matrix_raw, log=TRUE, prior.count=1)

# Remove genes with low variance for PCA
var_genes <- apply(logcpm_raw, 1, var)
high_var_genes <- order(var_genes, decreasing=TRUE)[1:1000]
pca_raw <- prcomp(t(logcpm_raw[high_var_genes,]), scale=TRUE)

pca_df_raw <- data.frame(
  PC1 = pca_raw$x[,1],
  PC2 = pca_raw$x[,2],
  sample = rownames(pca_raw$x),
  pool_size = sample_info$pool_size,
  lib_size = lib_sizes[rownames(pca_raw$x)]
)

pc1_var <- round(summary(pca_raw)$importance[2,1]*100, 1)
pc2_var <- round(summary(pca_raw)$importance[2,2]*100, 1)

# PCA colored by pool size
ggplot(pca_df_raw, aes(x = PC1, y = PC2, color = pool_size)) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "PCA before filtering (colored by pool size)",
       x = paste0("PC1 (", pc1_var, "%)"),
       y = paste0("PC2 (", pc2_var, "%)"),
       color = "Pool size") +
  scale_color_brewer(type = "qual", palette = "Set1")

# PCA colored by library size and shaped by pool size
ggplot(pca_df_raw, aes(x = PC1, y = PC2, color = lib_size, shape = pool_size)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCA before filtering (colored by library size)",
       x = paste0("PC1 (", pc1_var, "%)"),
       y = paste0("PC2 (", pc2_var, "%)"),
       color = "Library size",
       shape = "Pool size") +
  scale_color_gradient(low = "blue", high = "red", labels = comma) +
  scale_shape_manual(values = c(16, 17, 18))
```

## Filtering - All Samples

filtering steps:

1.  **Sparse genes**: Remove genes with low expression (CPM \> 3 in \>= 5 samples)
2.  optional **Highly expressed genes**: Remove top 10 most highly expressed genes (likely housekeeping genes)
3.  optional **Mitochondrial genes**: Remove mitochondrial genes
4.  optional **Ribosomal RNA genes**: Remove rRNA and rRNA pseudogenes

```{r}
#| label: filtering

# Filter sparse genes CPM>3 in >= 5 samples
count_matrix <- as.matrix(counts[,-c(1:2)])
rownames(count_matrix) <- counts$gene_id
cpm_values <- cpm(count_matrix)
count_matrix_zero <- count_matrix
count_matrix_zero[cpm_values < 3] <- 0
keep_sparse <- rowSums(count_matrix_zero[,-c(1:2)] > 1) >= 5

print(paste("Removed sparse genes:", sum(!keep_sparse)))

# Filter most highly expressed genes (remove top 10)
sum_expression <- rowSums(count_matrix)
gene_expression <- tibble(
  gene_id = counts$gene_id,
  gene_name = counts$gene_name,
  total_expression = sum_expression,
  perc = total_expression/(sum(count_matrix))*100
)

top_genes <- gene_expression %>%
  arrange(desc(total_expression)) %>%
  head(10)

knitr::kable(top_genes, caption = "Top 10 genes by total expression")

# Filter ribo and mito genes
all_genes <- gtf %>% filter(type=="gene") %>% as_tibble
mitochondrial_genes <- all_genes %>%
  filter(seqnames == "chrM") %>%
  pull(gene_id)
rrna_genes <- all_genes %>%
  filter(gene_type %in% c("rRNA","rRNA_pseudogene")) %>%
  pull(gene_id)

# Apply all filters
counts_filt <- counts[keep_sparse,] %>%
  filter(!(gene_id %in% c(top_genes$gene_id,
                          mitochondrial_genes,
                          rrna_genes)))

counts_filt_alt <- counts[keep_sparse,]

print(paste("Filtered dataset:", nrow(counts_filt), "genes,", ncol(counts_filt)-2, "samples,", round(sum(counts_filt[,-c(1,2)])/1000000, 2), "M UMIs"))
print(paste("Filtered dataset:", nrow(counts_filt_alt), "genes,", ncol(counts_filt_alt)-2, "samples,", round(sum(counts_filt_alt[,-c(1,2)])/1000000, 2), "M UMIs"))

```

## PCA After Filtering - All Samples

### stringent

```{r}
#| label: pca-after
#| fig-width: 12
#| fig-height: 5

count_matrix_filt <- as.matrix(counts_filt[,-c(1:2)])
rownames(count_matrix_filt) <- counts_filt$gene_id
logcpm_filt <- cpm(count_matrix_filt, log=TRUE, prior.count=1)

# Remove genes with low variance for PCA
var_genes_filt <- apply(logcpm_filt, 1, var)
high_var_genes_filt <- order(var_genes_filt, decreasing=TRUE)[1:min(1000, nrow(logcpm_filt))]
pca_filt <- prcomp(t(logcpm_filt[high_var_genes_filt,]), scale=TRUE)

# Calculate library sizes for filtered data
lib_sizes_filt <- colSums(count_matrix_filt)

pca_df_filt <- data.frame(
  PC1 = pca_filt$x[,1],
  PC2 = pca_filt$x[,2],
  sample = rownames(pca_filt$x),
  pool_size = sample_info$pool_size,
  lib_size = lib_sizes_filt[rownames(pca_filt$x)]
)

pc1_var_filt <- round(summary(pca_filt)$importance[2,1]*100, 1)
pc2_var_filt <- round(summary(pca_filt)$importance[2,2]*100, 1)

# PCA colored by library size and shaped by pool size
ggplot(pca_df_filt, aes(x = PC1, y = PC2, color = lib_size, shape = pool_size)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCA after filtering (colored by library size)",
       x = paste0("PC1 (", pc1_var_filt, "%)"),
       y = paste0("PC2 (", pc2_var_filt, "%)"),
       color = "Library size",
       shape = "Pool size") +
  scale_color_gradient(low = "blue", high = "red", labels = comma) +
  scale_shape_manual(values = c(16, 17, 18))
```

### lenient

```{r}
#| label: pca-after-alt
#| fig-width: 12
#| fig-height: 5

count_matrix_filt <- as.matrix(counts_filt_alt[,-c(1:2)])
rownames(count_matrix_filt) <- counts_filt_alt$gene_id
logcpm_filt <- cpm(count_matrix_filt, log=TRUE, prior.count=1)

# Remove genes with low variance for PCA
var_genes_filt <- apply(logcpm_filt, 1, var)
high_var_genes_filt <- order(var_genes_filt, decreasing=TRUE)[1:min(1000, nrow(logcpm_filt))]
pca_filt <- prcomp(t(logcpm_filt[high_var_genes_filt,]), scale=TRUE)

# Calculate library sizes for filtered data
lib_sizes_filt <- colSums(count_matrix_filt)

pca_df_filt <- data.frame(
  PC1 = pca_filt$x[,1],
  PC2 = pca_filt$x[,2],
  sample = rownames(pca_filt$x),
  pool_size = sample_info$pool_size,
  lib_size = lib_sizes_filt[rownames(pca_filt$x)]
)

pc1_var_filt <- round(summary(pca_filt)$importance[2,1]*100, 1)
pc2_var_filt <- round(summary(pca_filt)$importance[2,2]*100, 1)

# PCA colored by library size and shaped by pool size
ggplot(pca_df_filt, aes(x = PC1, y = PC2, color = lib_size, shape = pool_size)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCA after filtering (colored by library size)",
       x = paste0("PC1 (", pc1_var_filt, "%)"),
       y = paste0("PC2 (", pc2_var_filt, "%)"),
       color = "Library size",
       shape = "Pool size") +
  scale_color_gradient(low = "blue", high = "red", labels = comma) +
  scale_shape_manual(values = c(16, 17, 18))
```

## DEG

### stringent

#### Model Diagnostics - All Samples

```{r}
#| label: model-diagnostics

# Convert to DGEList and calculate normalization factors
dge <- DGEList(counts = counts_filt %>% column_to_rownames(var="gene_id"), samples = sample_info)
dge <- calcNormFactors(dge)

# Estimate dispersion and create dispersion plot
dge <- estimateDisp(dge, design=model.matrix(~ pool_size, data = sample_info))
```

#### Statistical Analysis - All Samples

```{r}
#| label: de-analysis2

# Create design matrix
design <- model.matrix(~ 0 + pool_size, data = sample_info)
colnames(design) <- levels(sample_info$pool_size)

# Estimate mean-variance trend and fit linear model
logCPM <- cpm(dge, log = TRUE, prior.count = 1)
fit <- lmFit(logCPM, design)
fit <- eBayes(fit, trend = TRUE)

# Define contrasts for pairwise comparisons
contrasts <- makeContrasts(
  pool320_vs_pool080 = pool320 - pool080,
  pool920_vs_pool080 = pool920 - pool080,
  pool920_vs_pool320 = pool920 - pool320,
  levels = design
)

# Fit contrasts
fit_contrasts <- contrasts.fit(fit, contrasts)
fit_contrasts <- eBayes(fit_contrasts, trend = TRUE)

# Extract results for each comparison
results_320_vs_080 <- topTable(fit_contrasts, coef = "pool320_vs_pool080", 
                               number = Inf, sort.by = "P")
results_920_vs_080 <- topTable(fit_contrasts, coef = "pool920_vs_pool080", 
                               number = Inf, sort.by = "P")
results_920_vs_320 <- topTable(fit_contrasts, coef = "pool920_vs_pool320", 
                               number = Inf, sort.by = "P")
```

#### Results Summary - Stringent Filtering

```{r}
#| label: results-summary

# Summary for 320ng vs 080ng
sig_320_vs_080 <- results_320_vs_080[results_320_vs_080$adj.P.Val < 0.05,]
up_320_vs_080 <- sum(sig_320_vs_080$logFC > 0)
down_320_vs_080 <- sum(sig_320_vs_080$logFC < 0)
print(paste("320ng vs 080ng:", nrow(sig_320_vs_080), "DE genes"))
print(paste("  Up-regulated:", up_320_vs_080))
print(paste("  Down-regulated:", down_320_vs_080))

# Summary for 920ng vs 080ng
sig_920_vs_080_summary <- results_920_vs_080[results_920_vs_080$adj.P.Val < 0.05,]
up_920_vs_080 <- sum(sig_920_vs_080_summary$logFC > 0)
down_920_vs_080 <- sum(sig_920_vs_080_summary$logFC < 0)
print(paste("920ng vs 080ng:", nrow(sig_920_vs_080_summary), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_080))
print(paste("  Down-regulated:", down_920_vs_080))

# Summary for 920ng vs 320ng
sig_920_vs_320 <- results_920_vs_320[results_920_vs_320$adj.P.Val < 0.05,]
up_920_vs_320 <- sum(sig_920_vs_320$logFC > 0)
down_920_vs_320 <- sum(sig_920_vs_320$logFC < 0)
print(paste("920ng vs 320ng:", nrow(sig_920_vs_320), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_320))
print(paste("  Down-regulated:", down_920_vs_320))
```

### lenient

#### Model Diagnostics - All Samples

```{r}
#| label: model-diagnostics2

# Convert to DGEList and calculate normalization factors
dge <- DGEList(counts = counts_filt_alt %>% column_to_rownames(var="gene_id"), samples = sample_info)
dge <- calcNormFactors(dge)

# Estimate dispersion and create dispersion plot
dge <- estimateDisp(dge, design=model.matrix(~ pool_size, data = sample_info))
```

#### Statistical Analysis - All Samples

```{r}
#| label: de-analysis3

# Create design matrix
design <- model.matrix(~ 0 + pool_size, data = sample_info)
colnames(design) <- levels(sample_info$pool_size)

# Estimate mean-variance trend and fit linear model
logCPM <- cpm(dge, log = TRUE, prior.count = 1)
fit <- lmFit(logCPM, design)
fit <- eBayes(fit, trend = TRUE)

# Define contrasts for pairwise comparisons
contrasts <- makeContrasts(
  pool320_vs_pool080 = pool320 - pool080,
  pool920_vs_pool080 = pool920 - pool080,
  pool920_vs_pool320 = pool920 - pool320,
  levels = design
)

# Fit contrasts
fit_contrasts <- contrasts.fit(fit, contrasts)
fit_contrasts <- eBayes(fit_contrasts, trend = TRUE)

# Extract results for each comparison with lenient suffix
results_320_vs_080_lenient <- topTable(fit_contrasts, coef = "pool320_vs_pool080", 
                                       number = Inf, sort.by = "P")
results_920_vs_080_lenient <- topTable(fit_contrasts, coef = "pool920_vs_pool080", 
                                       number = Inf, sort.by = "P")
results_920_vs_320_lenient <- topTable(fit_contrasts, coef = "pool920_vs_pool320", 
                                       number = Inf, sort.by = "P")
```

#### Results Summary - Lenient Filtering

```{r}
#| label: results-summary2

# Summary for 320ng vs 080ng
sig_320_vs_080 <- results_320_vs_080_lenient[results_320_vs_080_lenient$adj.P.Val < 0.05,]
up_320_vs_080 <- sum(sig_320_vs_080$logFC > 0)
down_320_vs_080 <- sum(sig_320_vs_080$logFC < 0)
print(paste("320ng vs 080ng:", nrow(sig_320_vs_080), "DE genes"))
print(paste("  Up-regulated:", up_320_vs_080))
print(paste("  Down-regulated:", down_320_vs_080))

# Summary for 920ng vs 080ng
sig_920_vs_080_summary <- results_920_vs_080_lenient[results_920_vs_080_lenient$adj.P.Val < 0.05,]
up_920_vs_080 <- sum(sig_920_vs_080_summary$logFC > 0)
down_920_vs_080 <- sum(sig_920_vs_080_summary$logFC < 0)
print(paste("920ng vs 080ng:", nrow(sig_920_vs_080_summary), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_080))
print(paste("  Down-regulated:", down_920_vs_080))

# Summary for 920ng vs 320ng
sig_920_vs_320 <- results_920_vs_320_lenient[results_920_vs_320_lenient$adj.P.Val < 0.05,]
up_920_vs_320 <- sum(sig_920_vs_320$logFC > 0)
down_920_vs_320 <- sum(sig_920_vs_320$logFC < 0)
print(paste("920ng vs 320ng:", nrow(sig_920_vs_320), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_320))
print(paste("  Down-regulated:", down_920_vs_320))
```

# Analysis with Top 8 Samples

## Sample Selection Strategy

Select the top 8 samples with highest library sizes from each pool size condition.

Downsample these to the minimum across all to get rid of power effects.

```{r}
#| label: top8-sample-selection

# Calculate library sizes for all samples
lib_sizes_all <- colSums(counts[,-c(1:2)])
lib_df_all <- data.frame(
  sample = names(lib_sizes_all),
  lib_size = lib_sizes_all,
  pool_size = sample_info$pool_size[match(names(lib_sizes_all), sample_info$sample)]
)

# Select top 8 samples per condition
top8_samples <- lib_df_all %>%
  group_by(pool_size) %>%
  top_n(8, lib_size) %>%
  arrange(pool_size, desc(lib_size)) %>%
  ungroup()

print("Top 8 samples per condition by library size:")
knitr::kable(top8_samples, caption = "Top 8 samples per condition selected for analysis")

# Filter counts for top 8 samples (use original unfiltered counts)
selected_samples <- top8_samples$sample
counts_top8_unfiltered <- counts %>%
  dplyr::select(gene_id, gene_name, all_of(selected_samples))

sample_info_top8 <- sample_info %>%
  filter(sample %in% selected_samples) %>%
  mutate(pool_size = factor(pool_size, levels = c("pool080", "pool320", "pool920")))

print(paste("Top 8 samples dataset:", nrow(counts_top8_unfiltered), "genes,", ncol(counts_top8_unfiltered)-2, "samples"))
print(paste("Sample distribution: pool080 =", sum(sample_info_top8$pool_size == "pool080"),
            ", pool320 =", sum(sample_info_top8$pool_size == "pool320"),
            ", pool920 =", sum(sample_info_top8$pool_size == "pool920")))

## Downsample to match library sizes

# Calculate target library size (min of pool080 and pool320 top 8 samples)
pool080_lib_sizes <- colSums(counts_top8_unfiltered[, sample_info_top8$sample[sample_info_top8$pool_size == "pool080"]])
pool320_lib_sizes <- colSums(counts_top8_unfiltered[, sample_info_top8$sample[sample_info_top8$pool_size == "pool320"]])
target_lib_size <- min(c(pool080_lib_sizes, pool320_lib_sizes))

print(paste("Target library size for downsampling:", round(target_lib_size, 0)))
print(paste("Pool080 min library size:", round(min(pool080_lib_sizes), 0)))
print(paste("Pool320 min library size:", round(min(pool320_lib_sizes), 0)))
print(paste("Pool920 min library size:", round(min(pool320_lib_sizes), 0)))

# Get pool920 samples and their current library sizes
lib_sizes <- colSums(counts_top8_unfiltered[,-c(1,2)])

print("library sizes before downsampling:")
print(round(lib_sizes, 0))

# Downsample
set.seed(123) # For reproducibility
counts_top8_downsampled <- counts_top8_unfiltered

for(sample_name in sample_info_top8$sample) {
  current_lib_size <- lib_sizes[sample_name]
  
  if(current_lib_size > target_lib_size) {
    # Calculate downsampling probability
    downsample_prob <- target_lib_size / current_lib_size
    
    # Get count vector for this sample (excluding gene_id and gene_name columns)
    sample_counts <- counts_top8_unfiltered[[sample_name]]
    
    # Downsample using binomial sampling
    downsampled_counts <- rbinom(n = length(sample_counts), 
                                 size = sample_counts, 
                                 prob = downsample_prob)
    
    # Update the counts matrix
    counts_top8_downsampled[[sample_name]] <- downsampled_counts
    
    cat("Sample", sample_name, ": downsampled from", current_lib_size, "to", sum(downsampled_counts), "UMIs\n")
  } else {
    cat("Sample", sample_name, ": no downsampling needed (", current_lib_size, "UMIs)\n")
  }
}

# Verify downsampling results
lib_sizes_after <- colSums(counts_top8_downsampled[,-c(1,2)])
print("\nLibrary sizes after downsampling:")
print("Pool080:")
print(round(colSums(counts_top8_downsampled[, sample_info_top8$sample[sample_info_top8$pool_size == "pool080"]]), 0))
print("Pool320:")
print(round(colSums(counts_top8_downsampled[, sample_info_top8$sample[sample_info_top8$pool_size == "pool320"]]), 0))
print("Pool920:")
print(round(colSums(counts_top8_downsampled[, sample_info_top8$sample[sample_info_top8$pool_size == "pool920"]]), 0))

# Use downsampled counts for further analysis
counts_top8_unfiltered <- counts_top8_downsampled
```

## Quality Control - Top 8 Samples

### Library Size Distribution - Top 8 Samples

```{r}
#| label: library-sizes-top8
#| fig-width: 10
#| fig-height: 6

lib_sizes_top8_all <- colSums(counts_top8_unfiltered[,-c(1:2)])
lib_df_top8_all <- data.frame(
  sample = names(lib_sizes_top8_all),
  lib_size = lib_sizes_top8_all,
  pool_size = sample_info_top8$pool_size
)

ggplot(lib_df_top8_all, aes(x = sample, y = lib_size, fill = pool_size)) +
  geom_bar(stat = "identity") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Library sizes - Top 8 samples per condition (after downsampling)", 
       x = "Sample", y = "UMI counts", fill = "Pool size") +
  scale_fill_brewer(type = "qual", palette = "Set1") +
  scale_y_continuous(labels = comma)

# Summary statistics
cat("Library size summary statistics after downsampling:\n")
lib_summary <- lib_df_top8_all %>%
  group_by(pool_size) %>%
  summarise(
    median = median(lib_size),
    mean = mean(lib_size),
    min = min(lib_size),
    max = max(lib_size),
    .groups = 'drop'
  )
knitr::kable(lib_summary, caption = "Library size statistics by pool size (after downsampling)")
```

### PCA Before Filtering - Top 8 Samples

```{r}
#| label: pca-before-top8
#| fig-width: 12
#| fig-height: 5

count_matrix_top8_raw <- as.matrix(counts_top8_unfiltered[,-c(1:2)])
rownames(count_matrix_top8_raw) <- counts_top8_unfiltered$gene_id
logcpm_top8_raw <- cpm(count_matrix_top8_raw, log=TRUE, prior.count=1)

# Remove genes with low variance for PCA
var_genes_top8_raw <- apply(logcpm_top8_raw, 1, var)
high_var_genes_top8_raw <- order(var_genes_top8_raw, decreasing=TRUE)[1:min(1000, nrow(logcpm_top8_raw))]
pca_top8_raw <- prcomp(t(logcpm_top8_raw[high_var_genes_top8_raw,]), scale=TRUE)

pca_df_top8_raw <- data.frame(
  PC1 = pca_top8_raw$x[,1],
  PC2 = pca_top8_raw$x[,2],
  sample = rownames(pca_top8_raw$x),
  pool_size = sample_info_top8$pool_size,
  lib_size = lib_sizes_top8_all[rownames(pca_top8_raw$x)]
)

pc1_var_top8_raw <- round(summary(pca_top8_raw)$importance[2,1]*100, 1)
pc2_var_top8_raw <- round(summary(pca_top8_raw)$importance[2,2]*100, 1)

# PCA colored by pool size
ggplot(pca_df_top8_raw, aes(x = PC1, y = PC2, color = pool_size)) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "PCA before filtering - Top 8 samples (colored by pool size)\n downsampled to match library sizes",
       x = paste0("PC1 (", pc1_var_top8_raw, "%)"),
       y = paste0("PC2 (", pc2_var_top8_raw, "%)"),
       color = "Pool size") +
  scale_color_brewer(type = "qual", palette = "Set1")

# PCA colored by library size
ggplot(pca_df_top8_raw, aes(x = PC1, y = PC2, color = lib_size, shape = pool_size)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCA before filtering - Top 8 samples (colored by library size)\n downsampled to match library sizes",
       x = paste0("PC1 (", pc1_var_top8_raw, "%)"),
       y = paste0("PC2 (", pc2_var_top8_raw, "%)"),
       color = "Library size",
       shape = "Pool size") +
  scale_color_gradient(low = "blue", high = "red", labels = comma) +
  scale_shape_manual(values = c(16, 17, 18))
```

## Filtering - Top 8 Samples

filtering steps:

1.  **Sparse genes**: Remove genes with low expression (CPM \> 3 in \>= 5 samples)
2.  optional **Highly expressed genes**: Remove top 10 most highly expressed genes (likely housekeeping genes)\
3.  optional **Mitochondrial genes**: Remove mitochondrial genes
4.  optional **Ribosomal RNA genes**: Remove rRNA and rRNA pseudogenes

```{r}
#| label: stringent-filtering-top8

# Step 1: Filter sparse genes CPM>3 in >= 5 samples (for 24 samples)
count_matrix_top8_unfiltered <- as.matrix(counts_top8_unfiltered[,-c(1:2)])
rownames(count_matrix_top8_unfiltered) <- counts_top8_unfiltered$gene_id
cpm_values_top8 <- cpm(count_matrix_top8_unfiltered)
count_matrix_top8_zero <- count_matrix_top8_unfiltered
count_matrix_top8_zero[cpm_values_top8 < 3] <- 0
keep_sparse_top8 <- rowSums(count_matrix_top8_zero > 1) >= 5

print(paste("Genes before sparse filtering (top 8 samples):", nrow(counts_top8_unfiltered)))
print(paste("Removed sparse genes (top 8 samples):", sum(!keep_sparse_top8)))

# Step 2: Filter most highly expressed genes (remove top 10)
sum_expression_top8 <- rowSums(count_matrix_top8_unfiltered)
gene_expression_top8 <- tibble(
  gene_id = counts_top8_unfiltered$gene_id,
  gene_name = counts_top8_unfiltered$gene_name,
  total_expression = sum_expression_top8,
  perc = total_expression/(sum(count_matrix_top8_unfiltered))*100
)

top_genes_top8 <- gene_expression_top8 %>%
  arrange(desc(total_expression)) %>%
  head(10)

print("Top 10 genes by total expression (top 8 samples):")
knitr::kable(top_genes_top8, caption = "Top 10 genes by total expression - Top 8 samples")

# Step 3: Filter ribo and mito genes (same as before)
mitochondrial_genes <- all_genes %>%
  filter(seqnames == "chrM") %>%
  pull(gene_id)
rrna_genes <- all_genes %>%
  filter(gene_type %in% c("rRNA","rRNA_pseudogene")) %>%
  pull(gene_id)

# Apply all filters
counts_top8_stringent <- counts_top8_unfiltered[keep_sparse_top8,] %>%
  filter(!(gene_id %in% c(top_genes_top8$gene_id,
                          mitochondrial_genes,
                          rrna_genes)))

counts_top8_lenient <- counts_top8_unfiltered[keep_sparse_top8,]

print(paste("Original dataset (top 8 samples):", nrow(counts_top8_unfiltered), "genes"))
print(paste("Stringent filtered dataset (top 8 samples):", nrow(counts_top8_stringent), "genes"))
print(paste("Stringent filtered dataset (top 8 samples):", nrow(counts_top8_lenient), "genes"))
```

## PCA after Filtering - Top 8 Samples

### stringent

```{r}
#| label: pca-top8
#| fig-width: 12
#| fig-height: 5

count_matrix_top8 <- as.matrix(counts_top8_stringent[,-c(1:2)])
rownames(count_matrix_top8) <- counts_top8_stringent$gene_id
logcpm_top8 <- cpm(count_matrix_top8, log=TRUE, prior.count=1)

# Remove genes with low variance for PCA
var_genes_top8 <- apply(logcpm_top8, 1, var)
high_var_genes_top8 <- order(var_genes_top8, decreasing=TRUE)[1:min(1000, nrow(logcpm_top8))]
pca_top8 <- prcomp(t(logcpm_top8[high_var_genes_top8,]), scale=TRUE)

pca_df_top8 <- data.frame(
  PC1 = pca_top8$x[,1],
  PC2 = pca_top8$x[,2],
  sample = rownames(pca_top8$x),
  pool_size = sample_info_top8$pool_size,
  lib_size = lib_sizes_top8_all[rownames(pca_top8$x)]
)

pc1_var_top8 <- round(summary(pca_top8)$importance[2,1]*100, 1)
pc2_var_top8 <- round(summary(pca_top8)$importance[2,2]*100, 1)

# PCA colored by pool size
ggplot(pca_df_top8, aes(x = PC1, y = PC2, color = pool_size)) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "PCA with top 8 samples per condition (colored by pool size)\n downsampled to match library sizes",
       x = paste0("PC1 (", pc1_var_top8, "%)"),
       y = paste0("PC2 (", pc2_var_top8, "%)"),
       color = "Pool size") +
  scale_color_brewer(type = "qual", palette = "Set1")

# PCA colored by library size
ggplot(pca_df_top8, aes(x = PC1, y = PC2, color = lib_size, shape = pool_size)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCA with top 8 samples per condition (colored by library size)\n
       downsampled to match library sizes",
       x = paste0("PC1 (", pc1_var_top8, "%)"),
       y = paste0("PC2 (", pc2_var_top8, "%)"),
       color = "Library size",
       shape = "Pool size") +
  scale_color_gradient(low = "blue", high = "red", labels = comma) +
  scale_shape_manual(values = c(16, 17, 18))
```

### lenient

```{r}
#| label: pca-top8_2
#| fig-width: 12
#| fig-height: 5

count_matrix_top8 <- as.matrix(counts_top8_lenient[,-c(1:2)])
rownames(count_matrix_top8) <- counts_top8_lenient$gene_id
logcpm_top8 <- cpm(count_matrix_top8, log=TRUE, prior.count=1)

# Remove genes with low variance for PCA
var_genes_top8 <- apply(logcpm_top8, 1, var)
high_var_genes_top8 <- order(var_genes_top8, decreasing=TRUE)[1:min(1000, nrow(logcpm_top8))]
pca_top8 <- prcomp(t(logcpm_top8[high_var_genes_top8,]), scale=TRUE)

pca_df_top8 <- data.frame(
  PC1 = pca_top8$x[,1],
  PC2 = pca_top8$x[,2],
  sample = rownames(pca_top8$x),
  pool_size = sample_info_top8$pool_size,
  lib_size = lib_sizes_top8_all[rownames(pca_top8$x)]
)

pc1_var_top8 <- round(summary(pca_top8)$importance[2,1]*100, 1)
pc2_var_top8 <- round(summary(pca_top8)$importance[2,2]*100, 1)

# PCA colored by pool size
ggplot(pca_df_top8, aes(x = PC1, y = PC2, color = pool_size)) +
  geom_point(size = 3) +
  theme_minimal() +
  labs(title = "PCA with top 8 samples per condition (colored by pool size)\n downsampled to match library sizes",
       x = paste0("PC1 (", pc1_var_top8, "%)"),
       y = paste0("PC2 (", pc2_var_top8, "%)"),
       color = "Pool size") +
  scale_color_brewer(type = "qual", palette = "Set1")

# PCA colored by library size
ggplot(pca_df_top8, aes(x = PC1, y = PC2, color = lib_size, shape = pool_size)) +
  geom_point(size = 4) +
  theme_minimal() +
  labs(title = "PCA with top 8 samples per condition (colored by library size)\n downsampled to match library sizes",
       x = paste0("PC1 (", pc1_var_top8, "%)"),
       y = paste0("PC2 (", pc2_var_top8, "%)"),
       color = "Library size",
       shape = "Pool size") +
  scale_color_gradient(low = "blue", high = "red", labels = comma) +
  scale_shape_manual(values = c(16, 17, 18))
```

## DEG - Top 8 Samples

### stringent

#### Model Diagnostics - All Samples

```{r}
#| label: model-diagnostics3

# Convert to DGEList and calculate normalization factors
dge <- DGEList(counts = counts_top8_stringent %>% column_to_rownames(var="gene_id"), samples = sample_info_top8)
dge <- calcNormFactors(dge)

# Estimate dispersion and create dispersion plot
dge <- estimateDisp(dge, design=model.matrix(~ pool_size, data = sample_info_top8))
```

#### Statistical Analysis - All Samples

```{r}
#| label: de-analysis4

# Create design matrix
design <- model.matrix(~ 0 + pool_size, data = sample_info_top8)
colnames(design) <- levels(sample_info_top8$pool_size)

# Estimate mean-variance trend and fit linear model
logCPM <- cpm(dge, log = TRUE, prior.count = 1)
fit <- lmFit(logCPM, design)
fit <- eBayes(fit, trend = TRUE)

# Define contrasts for pairwise comparisons
contrasts <- makeContrasts(
  pool320_vs_pool080 = pool320 - pool080,
  pool920_vs_pool080 = pool920 - pool080,
  pool920_vs_pool320 = pool920 - pool320,
  levels = design
)

# Fit contrasts
fit_contrasts <- contrasts.fit(fit, contrasts)
fit_contrasts <- eBayes(fit_contrasts, trend = TRUE)

# Extract results for each comparison with top8 stringent suffix
results_320_vs_080_top8_stringent <- topTable(fit_contrasts, coef = "pool320_vs_pool080", 
                                              number = Inf, sort.by = "P")
results_920_vs_080_top8_stringent <- topTable(fit_contrasts, coef = "pool920_vs_pool080", 
                                              number = Inf, sort.by = "P")
results_920_vs_320_top8_stringent <- topTable(fit_contrasts, coef = "pool920_vs_pool320", 
                                              number = Inf, sort.by = "P")
```

#### Results Summary - Stringent Filtering

```{r}
#| label: results-summary3

# Summary for 320ng vs 080ng
sig_320_vs_080 <- results_320_vs_080_top8_stringent[results_320_vs_080_top8_stringent$adj.P.Val < 0.05,]
up_320_vs_080 <- sum(sig_320_vs_080$logFC > 0)
down_320_vs_080 <- sum(sig_320_vs_080$logFC < 0)
print(paste("320ng vs 080ng:", nrow(sig_320_vs_080), "DE genes"))
print(paste("  Up-regulated:", up_320_vs_080))
print(paste("  Down-regulated:", down_320_vs_080))

# Summary for 920ng vs 080ng
sig_920_vs_080_summary <- results_920_vs_080_top8_stringent[results_920_vs_080_top8_stringent$adj.P.Val < 0.05,]
up_920_vs_080 <- sum(sig_920_vs_080_summary$logFC > 0)
down_920_vs_080 <- sum(sig_920_vs_080_summary$logFC < 0)
print(paste("920ng vs 080ng:", nrow(sig_920_vs_080_summary), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_080))
print(paste("  Down-regulated:", down_920_vs_080))

# Summary for 920ng vs 320ng
sig_920_vs_320 <- results_920_vs_320_top8_stringent[results_920_vs_320_top8_stringent$adj.P.Val < 0.05,]
up_920_vs_320 <- sum(sig_920_vs_320$logFC > 0)
down_920_vs_320 <- sum(sig_920_vs_320$logFC < 0)
print(paste("920ng vs 320ng:", nrow(sig_920_vs_320), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_320))
print(paste("  Down-regulated:", down_920_vs_320))
```

### lenient

#### Model Diagnostics - All Samples

```{r}
#| label: model-diagnostics4

# Convert to DGEList and calculate normalization factors
dge <- DGEList(counts = counts_top8_lenient %>% column_to_rownames(var="gene_id"), samples = sample_info_top8)
dge <- calcNormFactors(dge)

# Estimate dispersion and create dispersion plot
dge <- estimateDisp(dge, design=model.matrix(~ pool_size, data = sample_info_top8))
```

#### Statistical Analysis - All Samples

```{r}
#| label: de-analysis

# Create design matrix
design <- model.matrix(~ 0 + pool_size, data = sample_info_top8)
colnames(design) <- levels(sample_info_top8$pool_size)

# Estimate mean-variance trend and fit linear model
logCPM <- cpm(dge, log = TRUE, prior.count = 1)
fit <- lmFit(logCPM, design)
fit <- eBayes(fit, trend = TRUE)

# Define contrasts for pairwise comparisons
contrasts <- makeContrasts(
  pool320_vs_pool080 = pool320 - pool080,
  pool920_vs_pool080 = pool920 - pool080,
  pool920_vs_pool320 = pool920 - pool320,
  levels = design
)

# Fit contrasts
fit_contrasts <- contrasts.fit(fit, contrasts)
fit_contrasts <- eBayes(fit_contrasts, trend = TRUE)

# Extract results for each comparison with top8 lenient suffix
results_320_vs_080_top8_lenient <- topTable(fit_contrasts, coef = "pool320_vs_pool080", 
                                            number = Inf, sort.by = "P")
results_920_vs_080_top8_lenient <- topTable(fit_contrasts, coef = "pool920_vs_pool080", 
                                            number = Inf, sort.by = "P")
results_920_vs_320_top8_lenient <- topTable(fit_contrasts, coef = "pool920_vs_pool320", 
                                            number = Inf, sort.by = "P")
```

#### Results Summary - Lenient Filtering

```{r}
#| label: results-summary4

# Summary for 320ng vs 080ng
sig_320_vs_080 <- results_320_vs_080_top8_lenient[results_320_vs_080_top8_lenient$adj.P.Val < 0.05,]
up_320_vs_080 <- sum(sig_320_vs_080$logFC > 0)
down_320_vs_080 <- sum(sig_320_vs_080$logFC < 0)
print(paste("320ng vs 080ng:", nrow(sig_320_vs_080), "DE genes"))
print(paste("  Up-regulated:", up_320_vs_080))
print(paste("  Down-regulated:", down_320_vs_080))

# Summary for 920ng vs 080ng
sig_920_vs_080_summary <- results_920_vs_080_top8_lenient[results_920_vs_080_top8_lenient$adj.P.Val < 0.05,]
up_920_vs_080 <- sum(sig_920_vs_080_summary$logFC > 0)
down_920_vs_080 <- sum(sig_920_vs_080_summary$logFC < 0)
print(paste("920ng vs 080ng:", nrow(sig_920_vs_080_summary), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_080))
print(paste("  Down-regulated:", down_920_vs_080))

# Summary for 920ng vs 320ng
sig_920_vs_320 <- results_920_vs_320_top8_lenient[results_920_vs_320_top8_lenient$adj.P.Val < 0.05,]
up_920_vs_320 <- sum(sig_920_vs_320$logFC > 0)
down_920_vs_320 <- sum(sig_920_vs_320$logFC < 0)
print(paste("920ng vs 320ng:", nrow(sig_920_vs_320), "DE genes"))
print(paste("  Up-regulated:", up_920_vs_320))
print(paste("  Down-regulated:", down_920_vs_320))
```

# DE Gene Results Tables

## All Samples - Stringent Filtering

### 320ng vs 080ng - All Samples Stringent

```{r}
#| label: de-genes-320-080-all-stringent

# Get significant genes and add gene names
sig_genes_320_vs_080_all_stringent <- results_320_vs_080 %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (All samples - stringent):", nrow(sig_genes_320_vs_080_all_stringent)))

if(nrow(sig_genes_320_vs_080_all_stringent) > 0) {
  DT::datatable(sig_genes_320_vs_080_all_stringent, 
                caption = "DE genes: 320ng vs 080ng (All samples - stringent filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 080ng - All Samples Stringent

```{r}
#| label: de-genes-920-080-all-stringent

sig_genes_920_vs_080_all_stringent <- results_920_vs_080 %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (All samples - stringent):", nrow(sig_genes_920_vs_080_all_stringent)))

if(nrow(sig_genes_920_vs_080_all_stringent) > 0) {
  DT::datatable(sig_genes_920_vs_080_all_stringent, 
                caption = "DE genes: 920ng vs 080ng (All samples - stringent filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 320ng - All Samples Stringent

```{r}
#| label: de-genes-920-320-all-stringent

sig_genes_920_vs_320_all_stringent <- results_920_vs_320 %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (All samples - stringent):", nrow(sig_genes_920_vs_320_all_stringent)))

if(nrow(sig_genes_920_vs_320_all_stringent) > 0) {
  DT::datatable(sig_genes_920_vs_320_all_stringent, 
                caption = "DE genes: 920ng vs 320ng (All samples - stringent filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

## All Samples - Lenient Filtering

### 320ng vs 080ng - All Samples Lenient

```{r}
#| label: de-genes-320-080-all-lenient

sig_genes_320_vs_080_all_lenient <- results_320_vs_080_lenient %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (All samples - lenient):", nrow(sig_genes_320_vs_080_all_lenient)))

if(nrow(sig_genes_320_vs_080_all_lenient) > 0) {
  DT::datatable(sig_genes_320_vs_080_all_lenient, 
                caption = "DE genes: 320ng vs 080ng (All samples - lenient filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 080ng - All Samples Lenient

```{r}
#| label: de-genes-920-080-all-lenient

sig_genes_920_vs_080_all_lenient <- results_920_vs_080_lenient %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (All samples - lenient):", nrow(sig_genes_920_vs_080_all_lenient)))

if(nrow(sig_genes_920_vs_080_all_lenient) > 0) {
  DT::datatable(sig_genes_920_vs_080_all_lenient, 
                caption = "DE genes: 920ng vs 080ng (All samples - lenient filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 320ng - All Samples Lenient

```{r}
#| label: de-genes-920-320-all-lenient

sig_genes_920_vs_320_all_lenient <- results_920_vs_320_lenient %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (All samples - lenient):", nrow(sig_genes_920_vs_320_all_lenient)))

if(nrow(sig_genes_920_vs_320_all_lenient) > 0) {
  DT::datatable(sig_genes_920_vs_320_all_lenient, 
                caption = "DE genes: 920ng vs 320ng (All samples - lenient filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

## Top 8 Samples - Stringent Filtering

### 320ng vs 080ng - Top 8 Stringent

```{r}
#| label: de-genes-320-080-top8-stringent

sig_genes_320_vs_080_top8_stringent <- results_320_vs_080_top8_stringent %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (Top 8 samples - stringent):", nrow(sig_genes_320_vs_080_top8_stringent)))

if(nrow(sig_genes_320_vs_080_top8_stringent) > 0) {
  DT::datatable(sig_genes_320_vs_080_top8_stringent, 
                caption = "DE genes: 320ng vs 080ng (Top 8 samples - stringent filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 080ng - Top 8 Stringent

```{r}
#| label: de-genes-920-080-top8-stringent

sig_genes_920_vs_080_top8_stringent <- results_920_vs_080_top8_stringent %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (Top 8 samples - stringent):", nrow(sig_genes_920_vs_080_top8_stringent)))

if(nrow(sig_genes_920_vs_080_top8_stringent) > 0) {
  DT::datatable(sig_genes_920_vs_080_top8_stringent, 
                caption = "DE genes: 920ng vs 080ng (Top 8 samples - stringent filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 320ng - Top 8 Stringent

```{r}
#| label: de-genes-920-320-top8-stringent

sig_genes_920_vs_320_top8_stringent <- results_920_vs_320_top8_stringent %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (Top 8 samples - stringent):", nrow(sig_genes_920_vs_320_top8_stringent)))

if(nrow(sig_genes_920_vs_320_top8_stringent) > 0) {
  DT::datatable(sig_genes_920_vs_320_top8_stringent, 
                caption = "DE genes: 920ng vs 320ng (Top 8 samples - stringent filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

## Top 8 Samples - Lenient Filtering

### 320ng vs 080ng - Top 8 Lenient

```{r}
#| label: de-genes-320-080-top8-lenient

sig_genes_320_vs_080_top8_lenient <- results_320_vs_080_top8_lenient %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (Top 8 samples - lenient):", nrow(sig_genes_320_vs_080_top8_lenient)))

if(nrow(sig_genes_320_vs_080_top8_lenient) > 0) {
  DT::datatable(sig_genes_320_vs_080_top8_lenient, 
                caption = "DE genes: 320ng vs 080ng (Top 8 samples - lenient filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 080ng - Top 8 Lenient

```{r}
#| label: de-genes-920-080-top8-lenient

sig_genes_920_vs_080_top8_lenient <- results_920_vs_080_top8_lenient %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (Top 8 samples - lenient):", nrow(sig_genes_920_vs_080_top8_lenient)))

if(nrow(sig_genes_920_vs_080_top8_lenient) > 0) {
  DT::datatable(sig_genes_920_vs_080_top8_lenient, 
                caption = "DE genes: 920ng vs 080ng (Top 8 samples - lenient filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

### 920ng vs 320ng - Top 8 Lenient

```{r}
#| label: de-genes-920-320-top8-lenient

sig_genes_920_vs_320_top8_lenient <- results_920_vs_320_top8_lenient %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id") %>%
  dplyr::select(gene_id, gene_name, logFC, AveExpr, t, P.Value, adj.P.Val, B) %>%
  arrange(desc(abs(logFC)))

print(paste("Number of significant genes (Top 8 samples - lenient):", nrow(sig_genes_920_vs_320_top8_lenient)))

if(nrow(sig_genes_920_vs_320_top8_lenient) > 0) {
  DT::datatable(sig_genes_920_vs_320_top8_lenient, 
                caption = "DE genes: 920ng vs 320ng (Top 8 samples - lenient filtering, FDR < 0.05)",
                options = list(pageLength = 25, scrollX = TRUE, order = list(list(2, 'desc'))),
                filter = 'top') %>%
    DT::formatRound(columns = c('logFC', 'AveExpr', 't', 'P.Value', 'adj.P.Val', 'B'), digits = 4)
} else {
  cat("No significant genes found.")
}
```

# DE Gene Overlap Analysis

## UpSet Plot of DE Gene Overlaps

This section visualizes the overlap of differentially expressed genes across all 12 analysis conditions using an UpSet plot.

```{r}
#| label: upset-plot
#| fig-width: 14
#| fig-height: 8

# Extract significant gene IDs from all 12 conditions
de_gene_lists <- list(
  "All_Stringent_320v080" = rownames(results_320_vs_080[results_320_vs_080$adj.P.Val < 0.05, ]),
  "All_Stringent_920v080" = rownames(results_920_vs_080[results_920_vs_080$adj.P.Val < 0.05, ]),
  "All_Stringent_920v320" = rownames(results_920_vs_320[results_920_vs_320$adj.P.Val < 0.05, ]),
  
  "All_Lenient_320v080" = rownames(results_320_vs_080_lenient[results_320_vs_080_lenient$adj.P.Val < 0.05, ]),
  "All_Lenient_920v080" = rownames(results_920_vs_080_lenient[results_920_vs_080_lenient$adj.P.Val < 0.05, ]),
  "All_Lenient_920v320" = rownames(results_920_vs_320_lenient[results_920_vs_320_lenient$adj.P.Val < 0.05, ]),
  
  "Top8_Stringent_320v080" = rownames(results_320_vs_080_top8_stringent[results_320_vs_080_top8_stringent$adj.P.Val < 0.05, ]),
  "Top8_Stringent_920v080" = rownames(results_920_vs_080_top8_stringent[results_920_vs_080_top8_stringent$adj.P.Val < 0.05, ]),
  "Top8_Stringent_920v320" = rownames(results_920_vs_320_top8_stringent[results_920_vs_320_top8_stringent$adj.P.Val < 0.05, ]),
  
  "Top8_Lenient_320v080" = rownames(results_320_vs_080_top8_lenient[results_320_vs_080_top8_lenient$adj.P.Val < 0.05, ]),
  "Top8_Lenient_920v080" = rownames(results_920_vs_080_top8_lenient[results_920_vs_080_top8_lenient$adj.P.Val < 0.05, ]),
  "Top8_Lenient_920v320" = rownames(results_920_vs_320_top8_lenient[results_920_vs_320_top8_lenient$adj.P.Val < 0.05, ])
)

de_gene_lists <- list(
  "All_Stringent_320v080" = rownames(results_320_vs_080[results_320_vs_080$adj.P.Val < 0.05, ]),
  "All_Lenient_320v080" = rownames(results_320_vs_080_lenient[results_320_vs_080_lenient$adj.P.Val < 0.05, ]),
  "Top8_Stringent_320v080" = rownames(results_320_vs_080_top8_stringent[results_320_vs_080_top8_stringent$adj.P.Val < 0.05, ]),
  "Top8_Lenient_320v080" = rownames(results_320_vs_080_top8_lenient[results_320_vs_080_top8_lenient$adj.P.Val < 0.05, ]),
  
  "All_Stringent_920v080" = rownames(results_920_vs_080[results_920_vs_080$adj.P.Val < 0.05, ]),
  "All_Lenient_920v080" = rownames(results_920_vs_080_lenient[results_920_vs_080_lenient$adj.P.Val < 0.05, ]),
  "Top8_Stringent_920v080" = rownames(results_920_vs_080_top8_stringent[results_920_vs_080_top8_stringent$adj.P.Val < 0.05, ]),
  "Top8_Lenient_920v080" = rownames(results_920_vs_080_top8_lenient[results_920_vs_080_top8_lenient$adj.P.Val < 0.05, ]),
  
  "All_Stringent_920v320" = rownames(results_920_vs_320[results_920_vs_320$adj.P.Val < 0.05, ]),
  "All_Lenient_920v320" = rownames(results_920_vs_320_lenient[results_920_vs_320_lenient$adj.P.Val < 0.05, ]),
  "Top8_Stringent_920v320" = rownames(results_920_vs_320_top8_stringent[results_920_vs_320_top8_stringent$adj.P.Val < 0.05, ]),
  "Top8_Lenient_920v320" = rownames(results_920_vs_320_top8_lenient[results_920_vs_320_top8_lenient$adj.P.Val < 0.05, ])
)

# Print summary of DE genes per condition
cat("DE genes per condition (FDR < 0.05):\n")
sapply(de_gene_lists, length)

# Create UpSet plot
upset(fromList(de_gene_lists), 
      order.by = "freq",
      nsets = 12,
      sets = names(de_gene_lists),
      keep.order = TRUE,
      nintersects = 30,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.3, 1.3, 1, 1, 2, 1.5),
      set_size.show = TRUE,
      set_size.scale_max = max(sapply(de_gene_lists, length)) * 1.1)
```

## Summary of DE Gene Overlaps

```{r}
#| label: overlap-summary

# Create a summary table of overlaps
overlap_matrix <- fromList(de_gene_lists)

# Calculate total unique genes
total_unique_genes <- nrow(overlap_matrix)
cat("Total unique DE genes across all conditions:", total_unique_genes, "\n\n")

# Find genes that are DE in all contrasts for each analysis type
all_contrasts_all_stringent <- rownames(overlap_matrix)[
  overlap_matrix$All_Stringent_320v080 == 1 & 
    overlap_matrix$All_Stringent_920v080 == 1 & 
    overlap_matrix$All_Stringent_920v320 == 1]

all_contrasts_all_lenient <- rownames(overlap_matrix)[
  overlap_matrix$All_Lenient_320v080 == 1 & 
    overlap_matrix$All_Lenient_920v080 == 1 & 
    overlap_matrix$All_Lenient_920v320 == 1]

all_contrasts_top8_stringent <- rownames(overlap_matrix)[
  overlap_matrix$Top8_Stringent_320v080 == 1 & 
    overlap_matrix$Top8_Stringent_920v080 == 1 & 
    overlap_matrix$Top8_Stringent_920v320 == 1]

all_contrasts_top8_lenient <- rownames(overlap_matrix)[
  overlap_matrix$Top8_Lenient_320v080 == 1 & 
    overlap_matrix$Top8_Lenient_920v080 == 1 & 
    overlap_matrix$Top8_Lenient_920v320 == 1]

# Find genes that are consistently DE across all 12 conditions
consistent_genes <- rownames(overlap_matrix)[rowSums(overlap_matrix) == 12]

cat("Genes DE in all 3 contrasts per analysis type:\n")
cat("All samples - stringent filtering:", length(all_contrasts_all_stringent), "genes\n")
cat("All samples - lenient filtering:", length(all_contrasts_all_lenient), "genes\n")
cat("Top 8 samples - stringent filtering:", length(all_contrasts_top8_stringent), "genes\n")
cat("Top 8 samples - lenient filtering:", length(all_contrasts_top8_lenient), "genes\n\n")

cat("Genes consistently DE across ALL 12 conditions:", length(consistent_genes), "genes\n")

if(length(consistent_genes) > 0) {
  cat("Consistently DE genes:\n")
  consistent_genes_with_names <- genes[genes$gene_id %in% consistent_genes, c("gene_id", "gene_name")]
  knitr::kable(consistent_genes_with_names, caption = "Genes DE in all 12 analysis conditions")
}
```

## Analysis-Specific Overlaps

```{r}
#| label: analysis-specific-overlaps
#| fig-width: 12
#| fig-height: 10

# Create separate UpSet plots for different groupings
# All stringent
all_stringent_lists <- de_gene_lists[grepl("^All_.*Stringent", names(de_gene_lists))]

# All lenient
all_lenient_lists <- de_gene_lists[grepl("^All_.*Lenient", names(de_gene_lists))]

# Top 8 stringent
top8_stringent_lists <- de_gene_lists[grepl("^Top8_.*Stringent", names(de_gene_lists))]

# Top 8 lenient
top8_lenient_lists <- de_gene_lists[grepl("^Top8_.*Lenient", names(de_gene_lists))]

# 1. All samples (stringent vs lenient)
all_samples_lists <- de_gene_lists[grepl("^All_", names(de_gene_lists))]

# 2. Top 8 samples (stringent vs lenient)  
top8_samples_lists <- de_gene_lists[grepl("^Top8_", names(de_gene_lists))]

# 3. Stringent filtering (all vs top8)
stringent_lists <- de_gene_lists[grepl("Stringent", names(de_gene_lists))]

# 4. Lenient filtering (all vs top8)
lenient_lists <- de_gene_lists[grepl("Lenient", names(de_gene_lists))]


# All samples comparison
upset(fromList(all_samples_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### All stringent

```{r}
#| label: All-stringent-upset
#| fig-width: 12
#| fig-height: 6

upset(fromList(all_stringent_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### All lenient

```{r}
#| label: All-lenient-upset
#| fig-width: 12
#| fig-height: 6

upset(fromList(all_lenient_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### Top8 stringent

```{r}
#| label: Top8-stringent-upset
#| fig-width: 12
#| fig-height: 6

upset(fromList(top8_stringent_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### Top8 lenient

```{r}
#| label: Top8-lenient-upset
#| fig-width: 12
#| fig-height: 6

upset(fromList(top8_lenient_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### Top 8 Samples: Stringent vs Lenient Filtering

```{r}
#| label: top8-upset
#| fig-width: 12
#| fig-height: 6

# Top 8 samples comparison
upset(fromList(top8_samples_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### Stringent Filtering: All vs Top 8 Samples

```{r}
#| label: stringent-upset
#| fig-width: 12
#| fig-height: 6

# Stringent filtering comparison
upset(fromList(stringent_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

### Lenient Filtering: All vs Top 8 Samples

```{r}
#| label: lenient-upset
#| fig-width: 12
#| fig-height: 6

# Lenient filtering comparison
upset(fromList(lenient_lists), 
      order.by = "freq",
      nsets = 6,
      nintersects = 20,
      sets.bar.color = "#56B4E9",
      main.bar.color = "#E69F00",
      matrix.color = "#E69F00",
      text.scale = c(1.2, 1.2, 1, 1, 1.5, 1.2),
      set_size.show = TRUE,
      mainbar.y.label = "Intersection Size",
      sets.x.label = "Set Size")
```

# Gene Set Enrichment Analysis

## Configuration: Select DEG Dataset for GO Enrichment

```{r}
#| label: go-config

# USER CONFIGURATION: Choose which DEG dataset to use for GO enrichment
# Options:
# 1. "all_stringent" - All samples with stringent filtering
# 2. "all_lenient" - All samples with lenient filtering  
# 3. "top8_stringent" - Top 8 samples with stringent filtering
# 4. "top8_lenient" - Top 8 samples with lenient filtering

selected_deg_dataset <- "top8_lenient"  # Change this to select different dataset

# USER CONFIGURATION: Choose GO category for enrichment analysis
# Options:
# - "BP" - Biological Process
# - "MF" - Molecular Function  
# - "CC" - Cellular Component

selected_go_category <- "MF"  # Change this to select different GO category

# Define the results objects based on selection
if(selected_deg_dataset == "all_stringent") {
  selected_results_320_080 <- results_320_vs_080
  selected_results_920_080 <- results_920_vs_080
  selected_results_920_320 <- results_920_vs_320
  dataset_description <- "All samples with stringent filtering"
} else if(selected_deg_dataset == "all_lenient") {
  selected_results_320_080 <- results_320_vs_080_lenient
  selected_results_920_080 <- results_920_vs_080_lenient
  selected_results_920_320 <- results_920_vs_320_lenient
  dataset_description <- "All samples with lenient filtering"
} else if(selected_deg_dataset == "top8_stringent") {
  selected_results_320_080 <- results_320_vs_080_top8_stringent
  selected_results_920_080 <- results_920_vs_080_top8_stringent
  selected_results_920_320 <- results_920_vs_320_top8_stringent
  dataset_description <- "Top 8 samples with stringent filtering"
} else if(selected_deg_dataset == "top8_lenient") {
  selected_results_320_080 <- results_320_vs_080_top8_lenient
  selected_results_920_080 <- results_920_vs_080_top8_lenient
  selected_results_920_320 <- results_920_vs_320_top8_lenient
  dataset_description <- "Top 8 samples with lenient filtering"
} else {
  stop("Invalid selection. Choose from: all_stringent, all_lenient, top8_stringent, top8_lenient")
}

# Define GO category description
if(selected_go_category == "BP") {
  go_description <- "Biological Process"
} else if(selected_go_category == "MF") {
  go_description <- "Molecular Function"
} else if(selected_go_category == "CC") {
  go_description <- "Cellular Component"
} else {
  stop("Invalid GO category. Choose from: BP, MF, CC")
}

cat("Selected DEG dataset for GO enrichment:", dataset_description, "\n")
cat("Selected GO category:", go_description, "(", selected_go_category, ")\n")
cat("Change variables above to use different dataset or GO category\n\n")
```

## GO Enrichment Analysis - Selected Dataset

This section performs Gene Ontology (GO) enrichment analysis on the differentially expressed genes from the selected dataset: **`r dataset_description`** using **`r go_description`** terms.

### Gene ID Conversion and Background

```{r}
#| label: gene-conversion
#| message: false

# Convert gene symbols to Entrez IDs for mouse
# First, let's check what type of gene IDs we have
head(genes)

# Create condition-specific expressed gene sets
# Define expressed genes for each pool size condition (mean CPM > 1 within condition)

# Get samples for each condition
pool080_samples <- sample_info$sample[sample_info$pool_size == "pool080"]
pool320_samples <- sample_info$sample[sample_info$pool_size == "pool320"]
pool920_samples <- sample_info$sample[sample_info$pool_size == "pool920"]

# Calculate condition-specific expression
count_matrix_lenient <- as.matrix(counts_filt_alt[,-c(1:2)])
rownames(count_matrix_lenient) <- counts_filt_alt$gene_id
cpm_lenient <- cpm(count_matrix_lenient)

# Get expressed genes per condition (mean CPM > 1 within condition)
expressed_pool080 <- rownames(cpm_lenient)[apply(cpm_lenient[, pool080_samples], 1, function(x) mean(x) > 1)]
expressed_pool320 <- rownames(cpm_lenient)[apply(cpm_lenient[, pool320_samples], 1, function(x) mean(x) > 1)]
expressed_pool920 <- rownames(cpm_lenient)[apply(cpm_lenient[, pool920_samples], 1, function(x) mean(x) > 1)]

# Create pairwise universes (genes expressed in both conditions of each contrast)
universe_320_080_genes <- intersect(expressed_pool320, expressed_pool080)
universe_920_080_genes <- intersect(expressed_pool920, expressed_pool080)
universe_920_320_genes <- intersect(expressed_pool920, expressed_pool320)

print(paste("Genes expressed in pool080:", length(expressed_pool080)))
print(paste("Genes expressed in pool320:", length(expressed_pool320)))
print(paste("Genes expressed in pool920:", length(expressed_pool920)))
print(paste("Universe 320v080 (genes expressed in both):", length(universe_320_080_genes)))
print(paste("Universe 920v080 (genes expressed in both):", length(universe_920_080_genes)))
print(paste("Universe 920v320 (genes expressed in both):", length(universe_920_320_genes)))

# Convert to gene names and then to Entrez IDs for each universe
get_entrez_universe <- function(gene_ids) {
  gene_names <- genes$gene_name[genes$gene_id %in% gene_ids]
  entrez_ids <- mapIds(org.Mm.eg.db, 
                       keys = gene_names, 
                       column = "ENTREZID", 
                       keytype = "SYMBOL",
                       multiVals = "first")
  return(entrez_ids[!is.na(entrez_ids)])
}

universe_320_080_entrez <- get_entrez_universe(universe_320_080_genes)
universe_920_080_entrez <- get_entrez_universe(universe_920_080_genes)
universe_920_320_entrez <- get_entrez_universe(universe_920_320_genes)

print(paste("Universe 320v080 with Entrez IDs:", length(universe_320_080_entrez)))
print(paste("Universe 920v080 with Entrez IDs:", length(universe_920_080_entrez)))
print(paste("Universe 920v320 with Entrez IDs:", length(universe_920_320_entrez)))
```

### 320ng vs 080ng GO Enrichment

```{r}
#| label: go-320-080-selected
#| fig-width: 14
#| fig-height: 10

# Get significant genes from selected dataset
sig_genes_320_vs_080 <- selected_results_320_080 %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id")

print(paste("DE genes for 320ng vs 080ng (", dataset_description, "):", nrow(sig_genes_320_vs_080)))

if(nrow(sig_genes_320_vs_080) > 0) {
  # Convert to Entrez IDs
  de_genes_entrez_320_080 <- mapIds(org.Mm.eg.db, 
                                    keys = sig_genes_320_vs_080$gene_name, 
                                    column = "ENTREZID", 
                                    keytype = "SYMBOL",
                                    multiVals = "first")
  
  # Remove NA values
  de_genes_entrez_320_080 <- de_genes_entrez_320_080[!is.na(de_genes_entrez_320_080)]
  
  print(paste("DE genes with Entrez IDs:", length(de_genes_entrez_320_080)))
  
  if(length(de_genes_entrez_320_080) > 5) {
    # Use condition-specific universe (genes expressed in both 320ng and 080ng conditions)
    print(paste("Universe size (genes expressed in both 320ng and 080ng):", length(universe_320_080_entrez)))
    print(paste("DE genes for enrichment:", length(de_genes_entrez_320_080)))
    
    # GO enrichment analysis with condition-specific background
    go_results_320_080 <- enrichGO(gene = de_genes_entrez_320_080,
                                   universe = universe_320_080_entrez,
                                   OrgDb = org.Mm.eg.db,
                                   ont = selected_go_category,  # Use selected GO category
                                   pAdjustMethod = "BH",
                                   qvalueCutoff = 0.05,
                                   readable = TRUE)
    
    if(nrow(go_results_320_080) > 0) {
      # Display results table
      knitr::kable(head(go_results_320_080@result, 10), 
                   caption = paste("Top 10 GO", go_description, "terms - 320ng vs 080ng (", dataset_description, ")"))
      
      # Dot plot
      p1 <- dotplot(go_results_320_080, showCategory = 15) + 
        ggtitle(paste("GO", selected_go_category, "Enrichment: 320ng vs 080ng\n", dataset_description))
      print(p1)
      
      # Bar plot
      p2 <- barplot(go_results_320_080, showCategory = 15) + 
        ggtitle(paste("GO", selected_go_category, "Enrichment: 320ng vs 080ng\n", dataset_description))
      print(p2)
      
      # Enrichment map (if enough terms)
      if(nrow(go_results_320_080) >= 5) {
        p3 <- emapplot(pairwise_termsim(go_results_320_080), showCategory = 20) + 
          ggtitle(paste("GO", selected_go_category, "Enrichment Map: 320ng vs 080ng\n", dataset_description))
        print(p3)
      }
    } else {
      cat("No significant GO terms found for 320ng vs 080ng")
    }
  } else {
    cat("Not enough genes with Entrez IDs for enrichment analysis")
  }
} else {
  cat("No DE genes found for 320ng vs 080ng")
}
```

### 920ng vs 080ng GO Enrichment

```{r}
#| label: go-920-080-selected
#| fig-width: 14
#| fig-height: 10

# Get significant genes from selected dataset
sig_genes_920_vs_080 <- selected_results_920_080 %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id")

print(paste("DE genes for 920ng vs 080ng (", dataset_description, "):", nrow(sig_genes_920_vs_080)))

if(nrow(sig_genes_920_vs_080) > 0) {
  # Convert to Entrez IDs
  de_genes_entrez_920_080 <- mapIds(org.Mm.eg.db, 
                                    keys = sig_genes_920_vs_080$gene_name, 
                                    column = "ENTREZID", 
                                    keytype = "SYMBOL",
                                    multiVals = "first")
  
  # Remove NA values
  de_genes_entrez_920_080 <- de_genes_entrez_920_080[!is.na(de_genes_entrez_920_080)]
  
  print(paste("DE genes with Entrez IDs:", length(de_genes_entrez_920_080)))
  
  if(length(de_genes_entrez_920_080) > 5) {
    # Use condition-specific universe (genes expressed in both 920ng and 080ng conditions)
    print(paste("Universe size (genes expressed in both 920ng and 080ng):", length(universe_920_080_entrez)))
    print(paste("DE genes for enrichment:", length(de_genes_entrez_920_080)))
    
    # GO enrichment analysis with condition-specific background
    go_results_920_080 <- enrichGO(gene = de_genes_entrez_920_080,
                                   universe = universe_920_080_entrez,
                                   OrgDb = org.Mm.eg.db,
                                   ont = selected_go_category,  # Use selected GO category
                                   pAdjustMethod = "BH",
                                   qvalueCutoff = 0.05,
                                   readable = TRUE)
    
    if(nrow(go_results_920_080) > 0) {
      # Display results table
      knitr::kable(head(go_results_920_080@result, 10), 
                   caption = paste("Top 10 GO", go_description, "terms - 920ng vs 080ng (", dataset_description, ")"))
      
      # Dot plot
      p1 <- dotplot(go_results_920_080, showCategory = 15) + 
        ggtitle(paste("GO", selected_go_category, "Enrichment: 920ng vs 080ng\n", dataset_description))
      print(p1)
      
      # Bar plot
      p2 <- barplot(go_results_920_080, showCategory = 15) + 
        ggtitle(paste("GO", selected_go_category, "Enrichment: 920ng vs 080ng\n", dataset_description))
      print(p2)
      
      # Enrichment map (if enough terms)
      if(nrow(go_results_920_080) >= 5) {
        p3 <- emapplot(pairwise_termsim(go_results_920_080), showCategory = 20) + 
          ggtitle(paste("GO", selected_go_category, "Enrichment Map: 920ng vs 080ng\n", dataset_description))
        print(p3)
      }
    } else {
      cat("No significant GO terms found for 920ng vs 080ng")
    }
  } else {
    cat("Not enough genes with Entrez IDs for enrichment analysis")
  }
} else {
  cat("No DE genes found for 920ng vs 080ng")
}
```

### 920ng vs 320ng GO Enrichment

```{r}
#| label: go-920-320-selected
#| fig-width: 14
#| fig-height: 10

# Get significant genes from selected dataset
sig_genes_920_vs_320 <- selected_results_920_320 %>% 
  filter(adj.P.Val < 0.05) %>%
  rownames_to_column("gene_id") %>%
  left_join(genes, by="gene_id")

print(paste("DE genes for 920ng vs 320ng (", dataset_description, "):", nrow(sig_genes_920_vs_320)))

if(nrow(sig_genes_920_vs_320) > 0) {
  # Convert to Entrez IDs
  de_genes_entrez_920_320 <- mapIds(org.Mm.eg.db, 
                                    keys = sig_genes_920_vs_320$gene_name, 
                                    column = "ENTREZID", 
                                    keytype = "SYMBOL",
                                    multiVals = "first")
  
  # Remove NA values
  de_genes_entrez_920_320 <- de_genes_entrez_920_320[!is.na(de_genes_entrez_920_320)]
  
  print(paste("DE genes with Entrez IDs:", length(de_genes_entrez_920_320)))
  
  if(length(de_genes_entrez_920_320) > 5) {
    # Use condition-specific universe (genes expressed in both 920ng and 320ng conditions)
    print(paste("Universe size (genes expressed in both 920ng and 320ng):", length(universe_920_320_entrez)))
    print(paste("DE genes for enrichment:", length(de_genes_entrez_920_320)))
    
    # GO enrichment analysis with condition-specific background
    go_results_920_320 <- enrichGO(gene = de_genes_entrez_920_320,
                                   universe = universe_920_320_entrez,
                                   OrgDb = org.Mm.eg.db,
                                   ont = selected_go_category,  # Use selected GO category
                                   pAdjustMethod = "BH",
                                   qvalueCutoff = 0.05,
                                   readable = TRUE)
    
    if(nrow(go_results_920_320) > 0) {
      # Display results table
      knitr::kable(head(go_results_920_320@result, 10), 
                   caption = paste("Top 10 GO", go_description, "terms - 920ng vs 320ng (", dataset_description, ")"))
      
      # Dot plot
      p1 <- dotplot(go_results_920_320, showCategory = 15) + 
        ggtitle(paste("GO", selected_go_category, "Enrichment: 920ng vs 320ng\n", dataset_description))
      print(p1)
      
      # Bar plot
      p2 <- barplot(go_results_920_320, showCategory = 15) + 
        ggtitle(paste("GO", selected_go_category, "Enrichment: 920ng vs 320ng\n", dataset_description))
      print(p2)
      
      # Enrichment map (if enough terms)
      if(nrow(go_results_920_320) >= 5) {
        p3 <- emapplot(pairwise_termsim(go_results_920_320), showCategory = 20) + 
          ggtitle(paste("GO", selected_go_category, "Enrichment Map: 920ng vs 320ng\n", dataset_description))
        print(p3)
      }
    } else {
      cat("No significant GO terms found for 920ng vs 320ng")
    }
  } else {
    cat("Not enough genes with Entrez IDs for enrichment analysis")
  }
} else {
  cat("No DE genes found for 920ng vs 320ng")
}
```

### GO Enrichment Summary

```{r}
#| label: go-summary

# Summary of enrichment results for selected dataset
cat("=== GO ENRICHMENT SUMMARY ===\n")
cat("Selected dataset:", dataset_description, "\n")
cat("Selected GO category:", go_description, "(", selected_go_category, ")\n")
cat("Background strategy: Genes expressed in both conditions of each contrast\n\n")

if(exists("go_results_320_080")) {
  cat("320ng vs 080ng: ", nrow(go_results_320_080), " significant GO terms\n")
}
if(exists("go_results_920_080")) {
  cat("920ng vs 080ng: ", nrow(go_results_920_080), " significant GO terms\n")  
}
if(exists("go_results_920_320")) {
  cat("920ng vs 320ng: ", nrow(go_results_920_320), " significant GO terms\n")
}

```

# DE Gene Count Visualization

## Number of Up/Down-regulated Genes per Contrast

This section creates barplots showing the number of up- and down-regulated genes for each contrast across all analysis setups.

```{r}
#| label: de-gene-counts
#| fig-width: 14
#| fig-height: 12

# Function to extract DE gene counts
get_de_counts <- function(results_list, setup_name) {
  
  contrasts <- c("320v080", "920v080", "920v320")
  
  de_counts <- data.frame(
    Setup = character(),
    Contrast = character(),
    Direction = character(),
    Count = numeric(),
    stringsAsFactors = FALSE
  )
  
  for(i in 1:length(results_list)) {
    result <- results_list[[i]]
    contrast <- contrasts[i]
    
    # Get significant genes
    sig_genes <- result[result$adj.P.Val < 0.05, ]
    
    # Count up and down regulated
    up_count <- sum(sig_genes$logFC > 0, na.rm = TRUE)
    down_count <- sum(sig_genes$logFC < 0, na.rm = TRUE)
    
    # Add to data frame
    de_counts <- rbind(de_counts, 
                       data.frame(Setup = setup_name,
                                  Contrast = contrast,
                                  Direction = "Up-regulated",
                                  Count = up_count),
                       data.frame(Setup = setup_name,
                                  Contrast = contrast,
                                  Direction = "Down-regulated", 
                                  Count = -down_count))  # Negative for plotting below x-axis
  }
  
  return(de_counts)
}

# Extract DE counts for all setups
all_stringent_counts <- get_de_counts(
  list(results_320_vs_080, results_920_vs_080, results_920_vs_320),
  "All Samples - Stringent"
)

all_lenient_counts <- get_de_counts(
  list(results_320_vs_080_lenient, results_920_vs_080_lenient, results_920_vs_320_lenient),
  "All Samples - Lenient"
)

top8_stringent_counts <- get_de_counts(
  list(results_320_vs_080_top8_stringent, results_920_vs_080_top8_stringent, results_920_vs_320_top8_stringent),
  "Top 8 Samples - Stringent"
)

top8_lenient_counts <- get_de_counts(
  list(results_320_vs_080_top8_lenient, results_920_vs_080_top8_lenient, results_920_vs_320_top8_lenient),
  "Top 8 Samples - Lenient"
)

# Combine all data
all_de_counts <- rbind(all_stringent_counts, all_lenient_counts, top8_stringent_counts, top8_lenient_counts)

# Create individual plots for each setup
library(ggplot2)

# 1. All Samples - Stringent
p1 <- ggplot(all_stringent_counts, aes(x = Contrast, y = Count, fill = Direction)) +
  geom_bar(stat = "identity", position = "identity", width = 0.7) +
  geom_hline(yintercept = 0, color = "black", size = 0.5) +
  scale_fill_manual(values = c("Up-regulated" = "#E31A1C", "Down-regulated" = "#1F78B4")) +
  labs(title = "All Samples - Stringent Filtering",
       x = "Contrast", 
       y = "Number of DE genes",
       fill = "Regulation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        legend.position = "bottom") +
  geom_text(aes(label = abs(Count)), vjust = ifelse(all_stringent_counts$Count > 0, -0.5, 1.5), 
            size = 4, fontface = "bold") +
  scale_y_continuous(labels = abs, limits = c(min(all_de_counts$Count) * 1.2, max(all_de_counts$Count) * 1.2))

# 2. All Samples - Lenient  
p2 <- ggplot(all_lenient_counts, aes(x = Contrast, y = Count, fill = Direction)) +
  geom_bar(stat = "identity", position = "identity", width = 0.7) +
  geom_hline(yintercept = 0, color = "black", size = 0.5) +
  scale_fill_manual(values = c("Up-regulated" = "#E31A1C", "Down-regulated" = "#1F78B4")) +
  labs(title = "All Samples - Lenient Filtering",
       x = "Contrast", 
       y = "Number of DE genes",
       fill = "Regulation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        legend.position = "bottom") +
  geom_text(aes(label = abs(Count)), vjust = ifelse(all_lenient_counts$Count > 0, -0.5, 1.5), 
            size = 4, fontface = "bold") +
  scale_y_continuous(labels = abs, limits = c(min(all_de_counts$Count) * 1.2, max(all_de_counts$Count) * 1.2))

# 3. Top 8 Samples - Stringent
p3 <- ggplot(top8_stringent_counts, aes(x = Contrast, y = Count, fill = Direction)) +
  geom_bar(stat = "identity", position = "identity", width = 0.7) +
  geom_hline(yintercept = 0, color = "black", size = 0.5) +
  scale_fill_manual(values = c("Up-regulated" = "#E31A1C", "Down-regulated" = "#1F78B4")) +
  labs(title = "Top 8 Samples - Stringent Filtering",
       x = "Contrast", 
       y = "Number of DE genes",
       fill = "Regulation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        legend.position = "bottom") +
  geom_text(aes(label = abs(Count)), vjust = ifelse(top8_stringent_counts$Count > 0, -0.5, 1.5), 
            size = 4, fontface = "bold") +
  scale_y_continuous(labels = abs, limits = c(min(all_de_counts$Count) * 1.2, max(all_de_counts$Count) * 1.2))

# 4. Top 8 Samples - Lenient
p4 <- ggplot(top8_lenient_counts, aes(x = Contrast, y = Count, fill = Direction)) +
  geom_bar(stat = "identity", position = "identity", width = 0.7) +
  geom_hline(yintercept = 0, color = "black", size = 0.5) +
  scale_fill_manual(values = c("Up-regulated" = "#E31A1C", "Down-regulated" = "#1F78B4")) +
  labs(title = "Top 8 Samples - Lenient Filtering", 
       x = "Contrast", 
       y = "Number of DE genes",
       fill = "Regulation") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
        legend.position = "bottom") +
  geom_text(aes(label = abs(Count)), vjust = ifelse(top8_lenient_counts$Count > 0, -0.5, 1.5), 
            size = 4, fontface = "bold") +
  scale_y_continuous(labels = abs, limits = c(min(all_de_counts$Count) * 1.2, max(all_de_counts$Count) * 1.2))

# Display all plots
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2, nrow = 2)

# Print summary table
summary_table <- all_de_counts %>%
  mutate(Count = abs(Count)) %>%
  pivot_wider(names_from = Direction, values_from = Count) %>%
  mutate(Total = `Up-regulated` + `Down-regulated`) %>%
  arrange(Setup, Contrast)

knitr::kable(summary_table, caption = "Summary of DE gene counts across all analysis setups")
```

## Individual Setup Plots

### All Samples - Stringent Filtering

```{r}
#| label: plot-all-stringent
#| fig-width: 10
#| fig-height: 6

print(p1)
```

### All Samples - Lenient Filtering

```{r}
#| label: plot-all-lenient
#| fig-width: 10
#| fig-height: 6

print(p2)
```

### Top 8 Samples - Stringent Filtering

```{r}
#| label: plot-top8-stringent
#| fig-width: 10
#| fig-height: 6

print(p3)
```

### Top 8 Samples - Lenient Filtering

```{r}
#| label: plot-top8-lenient
#| fig-width: 10
#| fig-height: 6

print(p4)
```
